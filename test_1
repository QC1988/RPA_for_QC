# importing the libraries
import cv2 as cv
import pytesseract
import numpy as np
from PIL import Image
import pyocr

pyocr.tesseract.TESSERACT_CMD = 'C:\\Program Files (x86)\\Tesseract-OCR\\tesseract.exe'
# pytesseract.pytesseract.tesseract_cmd = 'C:\Program Files (x86)\Tesseract-OCR\\tesseract.exe'
# SHOW_PHOTO = False
SHOW_PHOTO = True
tools = pyocr.get_available_tools()
tool = tools[0]
norm_size_x = 960
norm_size_y = 1280
# im = Image.open('0002.jpg')
im = cv.imread('0002.jpg') #读取图片
if SHOW_PHOTO:
    im_res = cv.resize(im, (norm_size_x, norm_size_y))
    cv.imshow('im_res', im_res)
print(im.shape)

im_gray = cv.cvtColor(im, cv.COLOR_BGR2GRAY) #转换为灰度图
if SHOW_PHOTO:
    im_gray_res = cv.resize(im_gray, (norm_size_x, norm_size_y))
    cv.imshow('im_gray_res',im_gray_res)
print(im_gray.shape)

im_gray_bright =np.uint8(np.clip((cv.add(1.5*im_gray, 0)), 0, 255))
if SHOW_PHOTO:
    im_gray_bright_res = cv.resize(im_gray_bright, (norm_size_x, norm_size_y))
    cv.imshow('im_gray_brignt_res',im_gray_bright_res)
print(im_gray_bright.shape)


'''
retval, im_gray_bright_bit = cv.threshold(im_gray_bright, 127, 255, cv.THRESH_BINARY) 
if SHOW_PHOTO:
    im_gray_bright_bit_res = cv.resize(im_gray_bright_bit, (norm_size_x, norm_size_y))
    cv.imshow('im_gray_bright_bit_res',im_gray_bright_bit_res)
print(im_gray_bright_bit.shape)


# tmp = np.hstack((im_res, im_gray_res, im_gray_bright_res, im_gray_bright_bit_res))
# cv.imshow('image', tmp)
img = im_gray_bright_bit


height,width=img.shape
dst1=np.zeros((height,width,1),np.uint8)
for i in range(height):
    for j in range(width):
        dst1[i,j]=255-img[i,j]

if SHOW_PHOTO:
    dst1_res = cv.resize(dst1, (norm_size_x, norm_size_y))
    cv.imshow("dst1_res", dst1_res)

# 形态学计算，开操作1
kernel1 = cv.getStructuringElement(cv.MORPH_RECT, (4, 3))
res_open1 = cv.morphologyEx(dst1, cv.MORPH_OPEN, kernel1)
if SHOW_PHOTO:
    res_open1_res = cv.resize(res_open1, (norm_size_x, norm_size_y))
    cv.imshow("res_open1_res", res_open1_res)

# 形态学计算，开操作2
kernel2=cv.getStructuringElement(cv.MORPH_RECT,(3,4))
res_open2=cv.morphologyEx(res_open1,cv.MORPH_OPEN,kernel2) #开操作
if SHOW_PHOTO:
    res_open2_res = cv.resize(res_open2, (norm_size_x, norm_size_y))    
    cv.imshow("res_open2_res",res_open2_res)  # 显示图片

# 形态学计算，闭操作
kernel3=cv.getStructuringElement(cv.MORPH_RECT,(5,5))
res_close1=cv.morphologyEx(res_open2,cv.MORPH_CLOSE,kernel3) # 闭操作
if SHOW_PHOTO:
    res_close1_res = cv.resize(res_close1, (norm_size_x, norm_size_y))
    cv.imshow("res_close1_res", res_close1_res)

img = res_close1

height,width=img.shape
dst2=np.zeros((height,width,1),np.uint8)
for i in range(height):
    for j in range(width):
        dst2[i,j]=255-img[i,j]


if SHOW_PHOTO:
    dst2_res = cv.resize(dst2, (norm_size_x, norm_size_y))
    cv.imshow("dst2_res", dst2_res)

img2 = dst2
'''

result1 = tool.image_to_string(Image.fromarray(im_gray_bright), lang='jpn+eng', builder=pyocr.builders.TextBuilder(tesseract_layout=11))
result2 = tool.image_to_string(Image.fromarray(im_gray_bright), lang='jpn+eng', builder=pyocr.builders.WordBoxBuilder(tesseract_layout=6))
print(result1)
# print(result2)
# cv.imwrite('output.jpg',image)

result3 = np.array(result2)
for box in result3:
    cv.rectangle(im, box.position[0], box.position[1], 2, 4)
cv.imwrite('output.jpg',im)

if SHOW_PHOTO:
    im_out = cv.imread('output.jpg')
    im_out_res = cv.resize(im_out, (norm_size_x, norm_size_y))
    cv.imshow('im_out_res',im_out_res)
    cv.waitKey(0)

